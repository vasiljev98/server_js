var fs = require('file-system'); /*
	загружаем пакет file-system, и помещаем его в объект с именем, которое мы сами выбрали
	для того, чтобы загрузить произвольный пакет, мы должны обратиться к пакетному менеджеру npm.
	Мы находим в инете (например, на сайте npm) пакет для наших нужд, далее в консоли,
	в папке с нашим приложением пишем npm install --save <ИМЯ ПАКЕТА>, например, 
	npm install --save file-system. 
	*/
var read = require('read-file'); // Пакет, с помощью которого удобнее читать файлы.	
var express = require('express'); // Это микрофреймворк – пакет, с помощью которого можно сделать сервер
var app = express(); // тут мы создаем объект express и записываем его в переменную app.
var multer	= require('multer') /*
	Это middleware, то есть штука, которая предварительно обрабатывает http запросы перед тем,
	как тело запроса, или сам запрос поступит в методы, которые прописаны ниже (app.get, app.post и т.д.)
	*/
var upload = multer({ dest: 'upload-temp/' })/*
	тут мы указываем папку для временного хранения файлов, которые получает middleware multer
	*/

app.use(express.static('public')); /*
	так мы подключаем папку public с файлами, которые будет отдавать сервер
	*/
app.get('/', function(req, res) { // пустой запрос (главная страница) будет отдавать файл index.html
	 res.sendFile('public/index.html');
});

app.get('/download/:filename', function(req, res){ /*
	при получении GET запроса https://server-js-vasiljev98.c9users.io/download/<ИМЯ ФАЙЛА> 
	вызывается вот эта функция, у которой есть переменные req(request, запрос) 
	и res(result, результат).
	*/
	var filename = req.params.filename /* в объекте req содержится поле params. 
		Params – это объект, в котором содержатся все параметры запроса. А параметры запроса
		обозначаются так – /download/:parameter1/:parameter2, то есть через двоеточие пишется
		имя параметра.
		И в переменную filename мы записываем значение параметра filename.
		*/
		var file = __dirname + '/upload/' + filename; /*
			формируем путь до файла, где:
				__dirname – переменная, которую создает сам node.js. Это строка представляет
				путь в файловой системе сервера до папки с проектом.
				filename – переменная, которую мы создали на строке выше.
				upload – папка, в которой у нас все хранится.
			*/
	res.download(file); /*
		у объекта res имеется встроенный метод download, о нем и о многих других можно
		узнать в документации. Этот метод принимает строку, которая есть путь до файла, который
		мы хотим отдать от сервера клиенту. И в итоге метод посылает файл по протоколу http
		клиенту.
		*/
});

app.post('/upload', upload.single('uploadcontent'), function(req, res) {/*
		Этот метод вызывается при получении POST запроса на адрес /upload, он у нас вызывается
	по нажатию на кнопку на главной страце, то есть его мы не вызываем напрямую. Вообще,
	GET запросы – это то, что мы пишем в браузерной строке, а все остальные запросы просто так
	вызвать не получится. 
		Далее, в качестве второй переменной мы перемедаем middleware, это необязательный аргумент, 
	то есть его можно не указывать. Middleware помогает нам работать с загрузкой файлов на сервер, 
	то есть перед тем, как всем данным метода попасть сюда, они проходят через moddleware, то есть
	эта штука является адаптером, который мы подключили, чтобы упростить нам жизнь.
		Третьим аргументом идет функция, как и в методе выше. Мы сейчас в теле этой функции.
	*/
	fs.readFile(req.file.path, 'utf8', function (err, data) { /*
			У объекта fs, который мы создали выше, есть много методов. Один из них – readFile.
		В качестве первой переменной у нас путь до файла. Этот путь нам как раз и предоставляет moddleware,
		который мы подключили. Без него этого поля (file) у переменной req просто не было, и обращаться к 
		файлам было бы слишком сложно.
		Второй переменной передаем кодировку файла, utf8 – это, по-сути, стандарт.
		Третья переменная – функция, которая вызывается, когда чтение файла будет окончено. 
		Эта функция называется коллбэком, а код, их использующий – асинхронный код. 
		Это значит, что код внутри коллбэка не сразу выполняется, а только тогда, 
		когда выполнится код метода, в который мы передаем коллбэк.
		Коллбэк представляет собой функцию от двух и более переменных, где первой переменной
		является ошибка, а второй – данные, которые нам нужны. Если ошибок нет, то err у нас будет 
		равна null.
		А вообще, мы берем тут файл от middleware и далее запишем его в папку upload, из которой потом уже можно 
		будет скачать файлы.
		*/
		var newPath = __dirname + '/upload/' + req.file.originalname; /*
			формируем ссылку на файл, берем оригинальное имя файла, корневую директорию,
			и формируем строку, которая будет путем до нашего файла.
			*/

		fs.writeFile(newPath, data, function (err) {/*
			С помощью метода writeFile объекта fs мы записываем файл с путем и именем newPath.
			Этот метод находится внутри коллбэка метода fs.readFile, то есть этот метод будет
			выполняться только тогда, когда закончится чтение файла, и когда коллбэк вернет нам 
			переменную с именем data (в случае удачного чтения).
			Содержимое файла лежит в переменной data. 
			Третьим аргументом снова находится коллбэк. Коллбэк всегда идет последним аргументом.
			Так как нам не нужно передавать какие-то данные, этот коллбэк есть функция только
			от ошибки. То есть мы можем поставить обработчик ошибок, и если что-то пойдет не так, 
			то соответствующим образом на это реагировать.
			*/
			
			if (err){ // например, вот так мы можем обработать ошибку, выведя ее в консоль и завершив выполнение метода
				console.log('error:',err); // вывод в консоль браузера
				return // зывершение выполнения метода
			}
			res.redirect("back"); /*
				у переменной res есть метод redirect (переадресация),
				в него мы передадим строку 'back' и вернемся назад
				*/
		});
	});
});
console.log('server is running on port 8080') //выводим сообщение в консоль сервера
app.listen(8080) /* 
	просим сервер начать слушать порт 8080, то есть по нему мы будем обращаться к серверу.
	Вообще, адрес нашего приложения получается так:
		IP:PORT, где:
			ip – 4 числа через точку от 0 до 255, то есть что-то вроде 233.176.144.89
			ip это адрес сервера (компьютера), и у сервера есть около 65000 портов, но из 
			них используются далеко не все. 
			C9.io по умолчанию использует порт 8080, потому его мы и слушаем. 
			Часто в приложениях используют порты 3000, 5000, но эти числа ничего не значат.
		Соответственно, адрес нашего приложения представляет собой нечто вроде
			233.176.144.89:8080
		Но, чтобы не писать эти цифры, люди придумали DNS-серверы. То есть на самом деле
		у всех вот такие адреса 233.176.144.89:8080, но, DNS сервера, через которые идут
		все интернет соединения, они подменяют эти цифры на нормальные слова, например
		google.com, vk,com, server-js-vasiljev98.c9users.io.
	*/
